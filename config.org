#+TITLE: Doom Emacs Configuration
#+PROPERTY: header-args :tangle config.el :results silent
#+STARTUP: inlineimages

#+ATTR_ORG: :width 128
[[./assets/Okayeg.png]]

* Table of Contents
:PROPERTIES:
:TOC: :include all :depth 2
:END:

- [[./packages.el][Package Configuration]]

* Reloading Configuration

You can load a code block with ~RET~ to apply a specific configuration.

Compile/tangle this configuration into an elisp file with ~M-x org-babel-tangle~ or ~C-c C-v t~

Additionally, you can use ~M-x reload-config~ to tangle and evaluate the code blocks.

#+begin_src emacs-lisp
(defun reload-config () (interactive)
       (org-babel-load-file "~/.doom.d/config.org"))
#+end_src

* Init

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Humanoid Sandvich Dispenser"
      user-mail-address "humanoidsandvichdispenser@gmail.com")
#+END_SRC

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
~(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))~

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Sandvich" :size 16 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 16))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC

* Appearance

Show line numbers on the left column.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

Set the text scale step to 1.1x (instead of the default 1.2x)

#+BEGIN_SRC emacs-lisp
(setq text-scale-mode-step 1.1)
#+END_SRC

* Keybindings

Remap the semicolon key to colon, which would map to ~evil-ex~.

#+BEGIN_SRC emacs-lisp
;(define-key evil-motion-state-map ";" 'evil-ex)
(map! :n ";" 'evil-ex)
#+END_SRC

These are just normal keybinds.

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal 'global (kbd "C-s") 'save-buffer)
(evil-define-key 'insert 'global (kbd "C-p") 'previous-line)
(evil-define-key 'insert 'global (kbd "C-n") 'next-line)
(evil-define-key 'insert 'global (kbd "C-S-v") 'evil-paste-before)
#+END_SRC

Keybindings to toggle specific modes.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("f" . "file")
       :desc "Open treemacs" "t" #'treemacs))

(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle minimap" "m" #'minimap-mode))
#+END_SRC

* Plugin Configuration

** Doom Modeline

Enable color icons for the major mode, but disable *modal icons* (~evil-mode~).

#+BEGIN_SRC emacs-lisp
(setq doom-modeline-major-mode-color-icon t)

(setq doom-modeline-modal-icon nil)
#+END_SRC

** Beacon

#+BEGIN_SRC emacs-lisp
(beacon-mode t)
#+END_SRC

** Minimap

#+BEGIN_SRC emacs-lisp
(setq minimap-window-location 'right)
#+END_SRC

** Evil Snipe

Make ~evil-snipe~ search the visible part of the buffer, like ~vim-sneak~.

#+BEGIN_SRC emacs-lisp
(setq evil-snipe-scope 'visible)
#+END_SRC

* Orgmode

Set where orgfiles are normally located.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/Documents/org")
#+END_SRC

Enable mouse support for org.

#+BEGIN_SRC emacs-lisp
(require 'org-mouse)
#+END_SRC

** Org-specific Keybindings

#+BEGIN_SRC emacs-lisp
(map! :map org-mode-map
      :n "M-RET"
      (lambda () (interactive)
        (evil-insert-state)
        (org-meta-return)))
#+END_SRC

** Appearance

This sets the symbols of the ellipses of collapsed org headers.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ÔÑá")
#+END_SRC

This sets the font height of org headers and applies mixed-pitch.

#+BEGIN_SRC emacs-lisp
;(add-to-ordered-list mixed-pitch-fixed-pitch-faces 'org-level-1)
;(add-to-ordered-list mixed-pitch-fixed-pitch-faces 'org-level-2)
;(add-to-ordered-list mixed-pitch-fixed-pitch-faces 'org-level-3)

(add-hook 'org-mode-hook (lambda ()
                           (set-face-attribute 'org-level-1 nil :height 180 :weight 'regular :underline)
                           (set-face-attribute 'org-level-2 nil :height 150 :weight 'regular)))
                           ;(set-face-attribute 'org-level-1 nil :height 180 :weight 'regular :underline)
                           ;(set-face-attribute 'org-level-2 nil :height 150 :weight 'regular)
                           ;(mixed-pitch-mode)))

;(add-to-list mixed-pitch-fixed-pitch-faces)
#+END_SRC

Sets the character of plainlists ([[https://jessicastringham.net/2016/10/02/org-mode-bullet/][source]]). Also sets the header bullet symbols.

#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode '(("^ +\\([-*]\\) " 0
                                     (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢")))))

(setq org-superstar-headline-bullets-list (list "‚ò∞" "‚ùñ" "ÔëÑ" "ÔëÑ" "ÔëÑ")) ;‚ùß

(setq org-superstar-special-todo-item t)
#+END_SRC

Don't use the original width of the image when being displayed.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

*** Source Block Delimiters

Adds symbols to source block delimiters ([[https://emacs.stackexchange.com/a/31623][source]]).

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (defvar-local rasmus/org-at-src-begin -1
    "Variable that holds whether last position was a ")

  (defvar rasmus/ob-header-symbol ?‚ò∞
    "Symbol used for babel headers")

  (defun rasmus/org-prettify-src--update ()
    (let ((case-fold-search t)
          (re "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*")
          found)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (goto-char (match-end 0))
          (let ((args (org-trim
                       (buffer-substring-no-properties (point)
                                                       (line-end-position)))))
            (when (org-string-nw-p args)
              (let ((new-cell (cons args rasmus/ob-header-symbol)))
                (cl-pushnew new-cell prettify-symbols-alist :test #'equal)
                (cl-pushnew new-cell found :test #'equal)))))
        (setq prettify-symbols-alist
              (cl-set-difference prettify-symbols-alist
                                 (cl-set-difference
                                  (cl-remove-if-not
                                   (lambda (elm)
                                     (eq (cdr elm) rasmus/ob-header-symbol))
                                   prettify-symbols-alist)
                                  found :test #'equal)))
        ;; Clean up old font-lock-keywords.
        (font-lock-remove-keywords nil prettify-symbols--keywords)
        (setq prettify-symbols--keywords (prettify-symbols--make-keywords))
        (font-lock-add-keywords nil prettify-symbols--keywords)
        (while (re-search-forward re nil t)
          (font-lock-flush (line-beginning-position) (line-end-position))))))

  (defun rasmus/org-prettify-src ()
    "Hide src options via `prettify-symbols-mode'.

  `prettify-symbols-mode' is used because it has uncollpasing. It's
  may not be efficient."
    (let* ((case-fold-search t)
           (at-src-block (save-excursion
                           (beginning-of-line)
                           (looking-at "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*"))))
      ;; Test if we moved out of a block.
      (when (or (and rasmus/org-at-src-begin
                     (not at-src-block))
                ;; File was just opened.
                (eq rasmus/org-at-src-begin -1))
        (rasmus/org-prettify-src--update))
      ;; Remove composition if at line; doesn't work properly.
      ;; (when at-src-block
      ;;   (with-silent-modifications
      ;;     (remove-text-properties (match-end 0)
      ;;                             (1+ (line-end-position))
      ;;                             '(composition))))
      (setq rasmus/org-at-src-begin at-src-block)))

  (defun rasmus/org-prettify-symbols ()
    (mapc (apply-partially 'add-to-list 'prettify-symbols-alist)
          (cl-reduce 'append
                     (mapcar (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                             `(("#+begin_src" . ?Ôõó) ;; ‚û§ üñù ‚ûü ‚û§ ‚úé
                               ("#+end_src"   . "Ôõó") ;; ‚èπ
                               ("#+header:" . ,rasmus/ob-header-symbol)
                               ("#+begin_quote" . ?¬ª)
                               ("#+end_quote" . ?¬´)))))
    (turn-on-prettify-symbols-mode)
    (add-hook 'post-command-hook 'rasmus/org-prettify-src t t))
  (add-hook 'org-mode-hook #'rasmus/org-prettify-symbols))
#+END_SRC
